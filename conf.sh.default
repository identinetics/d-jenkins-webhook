#!/usr/bin/env bash

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  # load library functions
    configlib_version=2  # compatible version of conf_lib.sh
    check_version $configlib_version
    init_sudo
    _set_volume_root
    _set_image_and_container_name
    _set_users
    _set_buildargs
    _set_run_args
}


_set_volume_root() {
    # container volumes mounted to host paths, or symlinks to docker volumes
    DOCKERVOL_SHORT='/dv'
    DOCKERLOG_SHORT='/dl'
    #if [[ "$TRAVIS" == "true" ]] || [[ ! -z ${JENKINS_HOME+x} ]]; then
    #    DOCKERVOL_SHORT='./dv';
    #    DOCKERLOG_SHORT='./dl';
    #fi
    mkdir -p $DOCKERVOL_SHORT $DOCKERLOG_SHORT
}


_set_image_and_container_name() {
    # This IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    IMGID='42'
    # processes on the docker host etc.
    PROJSHORT='gh2jenkins'
    SERVICEDESCRIPTION=github2jenkins_proxy
    export IMAGENAME="rhoerbe/$PROJSHORT"  # [a-z_0-9]
    export CONTAINERNAME="${IMGID}$PROJSHORT"
    export DOCKER_REGISTRY=''  # blank for index.docker.io
}


_set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="3430${IMGID}"     # gid and uid for CONTAINERUSER
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


_set_buildargs() {
    export BUILDARGS="
        --build-arg CONTAINERUID=$CONTAINERUID
    "
}


_set_run_args() {
    # add installation-specific unguessable get-/post-paths, or limit access to selected IP-addresses
    getpath=t1mYfs918q4u5ydzOHXIaA4y
    export ENVSETTINGS="
        -e GETPATH=${getpath}
        -e OWNERLIST=identinetics,rhoerbe,edushare-at
        -e POSTPATH=TkFQBwJfYgvc6VPNgxjQESfV
        -e JENKINSBASEURL=http://localhost:8080/buildByToken/build
        -e JENKINSAPITOKEN=asdf98w4jsfd
        -e JENKINSUSER=xxxxx
        -e JENKINSUSERTOKEN=xxxxxxxxxx
        -e WEBHOOKPROXY=https://gh2j.identinetics.com/${getpath}
        -e POLLING_INTERVAL=10
        -e TRIGGER_JENKINS_OPTS=
    "
    # uncomment one of the following startup options
    #export STARTCMD='/scripts/run_trigger_jenkins.sh'
    #export STARTCMD='/scripts/start_webhook_srv.sh'

}


create_intercontainer_network() {
    # Create a local network on the docker host. As the default docker0 bridge has dynamic
    # addresses, a custom bridge is created allowing predictable addresses.
    network='dockernet'
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $network > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$network $network
    fi
    export NETWORKSETTINGS="
        --net $network
        --ip 10.1.1.${IMGID}
    "
}


setup_vol_mapping() {
    mode=$1  # create (used by run.sh)/list (used by manage.sh)
    VOLLIST=''
    VOLMAPPING=''
    create_user $CONTAINERUSER $CONTAINERUID
    map_docker_volume $mode "${CONTAINERNAME}.data" '/data' 'Z' $DOCKERVOL_SHORT
    if [[ ! $JENKINS_HOME ]]; then
        $sudo chown -R $CONTAINERUID:$CONTAINERUID $DOCKER_VOLUME_ROOT/$CONTAINERNAME.* 2>/dev/null || true
    fi
}


container_status() {
    $sudo docker ps | head -1
    $sudo docker ps --all | egrep $CONTAINERNAME\$
    $sudo docker exec -it $CONTAINERNAME /status.sh
}


main
