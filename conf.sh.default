#!/usr/bin/env bash

# settings for docker build, run and exec

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  # load library functions

    init_sudo
    set_volume_root
    set_image_and_container_name
    set_users
    set_buildargs
    set_run_args
    set_network
    set_vol_mapping
}


set_volume_root() {
    # container volumes mounted to host paths, or symlinks to docker volumes
    DOCKERVOL_SHORT='/dv'
    DOCKERLOG_SHORT='/dl'
    #if [[ "$TRAVIS" == "true" ]] || [[ ! -z ${JENKINS_HOME+x} ]]; then
    #    DOCKERVOL_SHORT='./dv';
    #    DOCKERLOG_SHORT='./dl';
    #fi
    mkdir -p $DOCKERVOL_SHORT $DOCKERLOG_SHORT
}


set_image_and_container_name() {
    # This IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    IMGID='42'
    # processes on the docker host etc.
    PROJSHORT='gh2jenkins'
    SERVICEDESCRIPTION=github2jenkins_proxy
    export IMAGENAME="rhoerbe/$PROJSHORT"  # [a-z_0-9]
    export CONTAINERNAME="${IMGID}$PROJSHORT"
    export DOCKER_REGISTRY=''  # blank for index.docker.io
}


set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="3430${IMGID}"     # gid and uid for CONTAINERUSER
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


set_buildargs() {
    export BUILDARGS="
        --build-arg CONTAINERUID=$CONTAINERUID
    "
}


set_run_args() {
    # add installation-specific unguessable get-/post-paths, or limit access to selected IP-addresses
    export ENVSETTINGS="
        -e GETPATH=t1mYfs918q4u5ydzOHXIaA4y
        -e OWNERLIST=identinetics,rhoerbe
        -e POSTPATH=TkFQBwJfYgvc6VPNgxjQESfV
        -e JENKINSBASEURL=http://localhost:8080/buildByToken/build
        -e JENKINSAPITOKEN=asdf98w4jsfd
        -e WEBHOOKPROXY=http://localhost:8081/status
        -e POLLING_INTERVAL=10
    "
    export STARTCMD='/bin/bash'  # unset or blank to use image default
}


set_network() {
    # The docker0 bridge has dynamic addresses, whereas a custom bridge allows predictable addresses
    NETWORK=dockernet
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $NETWORK > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$NETWORK $NETWORK
    fi
    export NETWORKSETTINGS="
        --net $NETWORK
        --ip 10.1.1.${IMGID}
    "
}


set_vol_mapping() {
    VOLLIST=''
    VOLMAPPING=''
    map_docker_volume "${CONTAINERNAME}.data" '/data' 'Z' $DOCKERVOL_SHORT
}


main
